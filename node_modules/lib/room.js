var User = require('config/models'); 
var Rate = require('lib/rate');

var room_list = {};

function keepAlive(resp) {
    if (resp) {
        resp.write(":\n");
        resp.keepAliveTimer = setTimeout(arguments.callee, 30000, resp);
    }
};
function kill(resp) {
    if (resp) {
        clearTimeout(resp.keepAliveTimer);
        resp.end();
    }
};

exports.create_room = function(id, des, rate, mode, callback) {
    // blind create room
    User.find({token: id}, function(err, users) {
        if (users.length != 0) {
            var room = room_list[id];
            if (room) {
                close(room);
                console.log("blind user " + id + " rejoin");
            } else {
                console.log("blind user " + id + " join");
            }
            room_list[id] = {
                "private": mode === "private",
                "blind_id": id,
                "blind_name": users[0].username,
                "blind_res": null,
                "des": des,
                "rate": rate,
                "helpers": {}
            };
            callback({'response': "Create room success", 'res': true});
        } else {
            callback({'response': "Cannot find user while create room", 'res': false});
        }
    });
};

exports.blind_keep_alive = function (id, res, callback) {
    // blind offer res
    User.find({ token: id }, function (err, users) {
        if (users.length != 0) {
            var room = room_list[id];
            if (room) {
                var headers = {
                    "Content-Type": "text/event-stream",
                    "Cache-Control": "no-cache, no-store",
                    "Pragma": "no-cache",
                    "Expires": "0"
                };
                res.writeHead(200, headers);

                if (room.blind_res) {
                    kill(room.blind_res);
                    console.log("blind user " + id + " update res");
                } else {
                    console.log("blind user " + id + " offer res");
                }
                room.blind_res = res;
                keepAlive(res);

                res.write(/* Join success */);
                refresh(room);
            } else {
                callback({ 'response': "Cannot find room while blind offer res", 'res': false });
            }
        } else {
            callback({ 'response': "Cannot find user while blind offer res", 'res': false });
        }
    });
};

exports.helper_join_room = function(id, room_id, res, callback) {
    // helper join room in list
    User.find({token: id}, function(err, users) {
        if (users.length != 0) {
            var user = users[0];
            var room = room_list[room_id];
            if (room) {
                if (room.helpers[id]) {
                    kill(room.helpers[id].res);
                    delete room.helpers[id];
                    console.log("helper " + id + " rejoin room " + room_id);
                } else {
                    console.log("helper " + id + " join room " + room_id);
                }
                var rate = Math.round((user.rateTotal / user.rateNum) * 10) / 10;
                room.helpers[id] = {
                    "id": id,
                    "username": user.username,
                    "res": null,
                    "rate": rate
                };
                refresh(room);
                
                callback({'response': "Helper join success", 'res': true});
            } else {
                callback({'response': "Cannot find room while helper join", 'res': false});
            }
        } else {
            callback({'response': "Cannot find user while helper join", 'res': false});
        }
    });
};

exports.helper_keep_alive = function(id, room_id, res, callback) {
    // helper offer res
    User.find({token: id}, function(err, users) {
        if (users.length != 0) {
            var user = users[0];
            var room = room_list[room_id];
            if (room) {
                var helper = room.helpers[id];
                if (helper) {
                    var headers = {
                        "Content-Type": "text/event-stream",
                        "Cache-Control": "no-cache, no-store",
                        "Pragma": "no-cache",
                        "Expires": "0"
                    };
                    res.writeHead(200, headers);
                    
                    if (helper.res) {
                        kill(helper.res);
                        console.log("helper " + id + " update res");
                    } else {
                        console.log("helper " + id + " offer res");
                    }
                    helper.res = res;
                    keepAlive(res);
                    res.write(/* Join success */);
                } else {
                    callback({'response': "Not in the list while helper offer res", 'res': false});
                }
            } else {
                callback({'response': "Room is closed while helper offer res", 'res': false});
            }
        } else {
            callback({'response': "Cannot find user while helper offer res", 'res': false});
        }
    });
};

exports.leave_room = function(id, room_id, callback) {
    // helper leave room
    User.find({token: id}, function(err, users) {
        if (users.length != 0) {
            var user = users[0];
            var room = room_list[room_id];
            if (room) {
                if (room.helpers[id]) {
                    kill(room.helpers[id].res);
                    delete room.helpers[id];
                    refresh(room);
                    callback({'response': "Leave room success", 'res': true});
                } else {
                    callback({'response': "Not in thie room", 'res': false});
                }
            } else {
                callback({'response': "Cannot find room while leave", 'res': false});
            }
        } else {
            callback({'response': "Cannot find user while leave room", 'res': false});
        }
    });
};

exports.select = function(blind_id, helper_id, callback) {
    User.find({token: blind_id}, function(err, users) {
        if (users.length != 0) {
            var blind = users[0];
            var room = room_list[blind_id];
            if (room) {
                var helper = room.helpers[helper_id];
                if (helper) {
                    /* Create session and token */
                    helper.res.write(/* session and token */);
                    close(room);
                    callback({
                        'response': "Select success, start video", 
                        'res': true,
                        'session': 0, //TODO
                        'token': 0 //TODO
                    });
                } else {
                    refresh(room);
                    callback({'response': "Helper not in list", 'res': false});
                }
            } else {
                callback({'response': "Cannot find room while select", 'res': false});
            }
        } else {
            callback({'response': "Cannot find user while select", 'res': false});
        }
    });
};

exports.delete_room = function(id, callback) {
    // blind close room
    User.find({token: id}, function(err, users) {
        if (users.length != 0) {
            var room = room_list[id];
            if (room) {
                close(room);
                callback({'response': "Close room success", 'res': true});
            } else {
                callback({'response': "Cannot find room", 'res': false});
            }
        } else {
            callback({'response': "Cannot find user while close room", 'res': false});
        }
    });
};

exports.get_rooms = function(id, callback) {
    User.find({token: id}, function(err, users) {
        if (users.length != 0) {
            var rooms = [];
            var count = 0;
            for (var room_id in room_list) {
                if (count >= 20) break;
                var room = room_list[room_id];
                if (room.private) continue;
                
                count++;
                rooms.push({
                    "username": room.blind_name,
                    "room_id": room.blind_id,
                    "des": room.des,
                    "rate": room.rate
                });
            }
            callback({
                'response': "Get rooms success", 
                'res': true,
                'size': count,
                'list': JSON.stringify(rooms)
            });
        } else {
            callback({'response': "Cannot find user while close room", 'res': false});
        }
    });
};

var refresh = function(room) {
    if (!room.blind_res) return;
    var namelist = [];
    for (var helper_id in room.helpers) {
        var helper = room.helpers[helper_id];
        namelist.push({
            "username": helper.username,
            "id": helper.id,
            "rate": helper.rate
        });
    }
    room.blind_res.write(JSON.stringify(namelist));
};

var close = function(room) {
    kill(room.blind_res);
    for (var helper_id in room.helpers) {
        if (room.helpers[helper_id].res) {
            room.helpers[helper_id].res.write(/* Quit */);
            kill(room.helpers[helper_id].res);
        }
    }
    delete room_list[room.blind_id];
};
