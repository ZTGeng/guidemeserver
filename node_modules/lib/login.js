var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var nodemailer = require('nodemailer');
// var gravatar = require('gravatar'); 
var user = require('config/models');

var smtpTransport = nodemailer.createTransport("SMTP", {
    auth: {
        user: "guidemesfsu@gmail.com",
        pass: "sfsu2016spring"
    } 
});

var isEmailValid = function(email) {
    return true;
}

var isPasswordValid = function(password) {
    return true;
} 

exports.login = function(email, password, callback) {  
    user.find({email: email}, function(err, users) {  
        if (users.length == 0) {
            callback({'response':"Email does not exist.", 'res':false});
        } else {  
            var salt = users[0].salt; 
            var hashed_password = users[0].hashed_password; 
            var token = users[0].token; 
            var temp = salt + password; 
            var hashed = crypto.createHash('sha512').update(temp).digest("hex"); 
            // var grav_url = gravatar.url(email, {s: '200', r: 'pg', d: '404'}); 
            var username = users[0].username;
            var role = users[0].role;
            var rate = (Math.round((users[0].rateTotal / users[0].rateNum) * 10) / 10).toString();
            if (hashed == hashed_password) {  
                callback({'response':"Login sucess.", 'res':true, 'token':token, 'username':username, 'role':role, 'rate':rate});  
            } else {  
                callback({'response':"Password is not correct.", 'res':false});  
            } 
        } 
    }); 
} 

exports.register = function(email, password, username, role, callback) {  
    var x = email; 
    //if(!(x.indexOf("@")=x.length)){ 
    if (!isEmailValid(email)) {
        callback({'response':"Email is not valid.", 'res': false});
    } else {
        //if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && password.length > 4 && password.match(/[0-9]/) && password.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {  
        if (!isPasswordValid(password)) {
            callback({'response':"Password is too weak.", 'res': false});
        } else {
            var salt = rand(160, 36); 
            var temp = salt + password; 
            var token = crypto.createHash('sha512').update(email + salt).digest("hex"); 
            var hashed_password = crypto.createHash('sha512').update(temp).digest("hex");  

            user.find({email: email}, function(err, users) {  
                if (users.length != 0) {
                    callback({'response':"Email is already used.", 'res': false});
                } else {
                    var newuser = new user({    
                        token: token,   
                        email: email,   
                        hashed_password: hashed_password,   
                        salt: salt,
                        username: username,
                        role: role,
                        rateTotal: 5,
                        rateNum: 1,
                        gcm_token: '',
                        friends: []
                    });  
                    newuser.save(function(error) {
                        if (error) {
                            callback({'response':"Error while registering.", 'res': false});  
                        } else {
                            callback({'response':"Register success.", 'res': true});  
                        }
                    });
                }
            });
        }
    } 
}

exports.isEmailFree = function(email, callback) {
    user.find({email: email}, function(err, users){
        if (users.length == 0) {
            callback({'res': true});
        } else {
            callback({'res': false});
        }
    });
}

exports.isUsernameFree = function(username, callback) {
    user.find({username: username}, function(err, users){
        if (users.length == 0) {
            callback({'res': true});
        } else {
            callback({'res': false});
        }
    });
}

exports.changePassword = function(token, opass, npass, callback) {  
    var new_salt = rand(160, 36); 
    var temp = new_salt + npass; 
    var new_hashed_password = crypto.createHash('sha512').update(temp).digest("hex");  

    user.find({token: token}, function(err, users) {  
        if (users.length == 0) {
            callback({'response':"Error while changing password.", 'res':false});
        } else {
            var salt = users[0].salt; 
            var hashed_password = users[0].hashed_password; 
            var temp1 = salt + opass; 
            var hashed = crypto.createHash('sha512').update(temp1).digest("hex");   

            if (hashed != hashed_password) {
                callback({'response':"Password is not correct.", 'res':false});
            } else {
                // if (npass.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && npass.length > 4 && npass.match(/[0-9]/) && npass.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {  
                if (!isPasswordValid(npass)) {
                    callback({'response':"New password is too weak.", 'res':false});
                } else {
                    user.findOne({ email: email }, function (err, doc) {  
                        doc.hashed_password = new_hashed_password;   
                        doc.salt = new_salt;   
                        doc.save();  

                        callback({'response':"Password sucessfully changed.", 'res':true});
                    });
                }
            }
        }
    });
}

exports.sendResetPasswordEmail = function(email, callback) {  
    var code = rand(24, 24); 
    user.find({email: email}, function(err, users) {  
        if(users.length == 0) {
            callback({'response':"Email does not exist.", 'res':false});
        } else {
            user.findOne({ email: email }, function (err, doc){   
                doc.temp_str = code;   
                doc.save();  

                var mailOptions = {     
                    from: "GuideMe  <guidemesfsu@gmail.com>",     
                    to: email,     
                    subject: "Reset Password ",     
                    text: "Hello " + email + ".  Code to reset your Password is "+ code + ".\n\nRegards,\nGuideMe,\nSFSU.edu." 
                }  

                smtpTransport.sendMail(mailOptions, function(error, response) {     
                    if (error) {  
                        callback({'response':"Error while resetting password.", 'res':false});      
                    } else {  
                        callback({'response':"Check your Email and enter the verification code to reset your Password.", 'res':true});      
                    } 
                }); 
            }); 
        }
    }); 
}  

exports.resetPassword = function(email, code, npass, callback) {   
    user.find({email: email},function(err, users) {  
        if (users.length == 0) {
            callback({'response':"Email does not exist.",'res':false});
        } else {
            var code_saved = users[0].temp_str; 
            if (code != code_saved) {
                callback({'response':"Code is not correct.", 'res':false});
            } else { 
                // if (npass.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && npass.length > 4 && npass.match(/[0-9]/) && npass.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) { 
                if (!isPasswordValid(npass)) {
                    callback({'response':"New password is weak.", 'res':false});
                } else {
                    var salt = rand(160, 36); 
                    var temp = salt + npass; 
                    var hashed_password = crypto.createHash('sha512').update(temp).digest("hex");  

                    user.findOne({ email: email }, function (err, doc) {   
                        doc.hashed_password = hashed_password;   
                        doc.salt = salt;   
                        doc.temp_str = "";   
                        doc.save();  

                        callback({'response':"Password sucessfully changed.", 'res':true});  
                    });
                }
            }
        } 
    }); 
}
